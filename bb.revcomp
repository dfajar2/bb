#!/usr/bin/perl
use strict;
use warnings;
#----------------------------------------------------------#
#        Author: Douglas Senalik dsenalik@wisc.edu         #
#----------------------------------------------------------#
# "Black Box" program series
=bb
pipe to reverse complement a raw sequence stream
=cut bb



my @stream = <>;
my $rc = revcompfasta ( join ( '', @stream ) );
print $rc;
exit 0;



############################################################
sub revcompfasta { my ( $dna ) = @_;
############################################################
# if stream is in fasta format, split on headers and only
# reverse complement the sequence. If in raw format, entire
# stream is reverse complemented
  my @lines = split( /[\n\r]+/, $dna );
  my $tmpseq = '';
  my $outseq = '';
  my $wasfasta = 0;
  foreach my $aline ( split( /[\n\r]+/, $dna ) )
    {
      if ( $aline =~ m/^>/ )
        {
          if ( $tmpseq )
            {
              my $tmp = revcomp( $tmpseq );
              $tmp =~ s/^\n+//;
              $tmp =~ s/\n+$//;
              $outseq .= $tmp;
              $tmpseq = '';
            }
          if ( $outseq )
            { $outseq .= "\n"; }
          $outseq .= $aline . "rc\n";
          $wasfasta = 1;
        }
      else
        {
          if ( $tmpseq )
            { $tmpseq .= "\n"; }
          $tmpseq .= $aline;
        }
    }
  if ( $tmpseq )
    {
      my $tmp = revcomp( $tmpseq );
      $tmp =~ s/^\n+//;
      $tmp =~ s/\n+$//;
      $outseq .= $tmp;
      # no return at end of final sequence unless was in fasta format
      if ( $wasfasta ) { $outseq .= "\n"; }
    }
  return( $outseq );
} # sub revcompfasta



############################################################
sub revcomp { my ( $dna ) = @_;
############################################################
# standard DNA reverse complement, including degenerate bases
  my $revcomp = reverse ( $dna );
  $revcomp =~ tr/AaCcTtGgMmRrYyKkVvHhDdBb/TtGgAaCcKkYyRrMmBbDdHhVv/;
  return $revcomp;
} # sub revcomp



#eof
